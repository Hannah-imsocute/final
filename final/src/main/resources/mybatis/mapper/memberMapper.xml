<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.MemberMapper">

	<insert id="insertMember1" parameterType="com.sp.app.model.Member">
		INSERT INTO member (memberidx, email, password, nickname, block, reg_date)
		VALUES (seq_member.NEXTVAL, #{email}, #{password}, #{nickName}, 0 , SYSDATE)
	</insert>
	
	<insert id="insertMember2" parameterType="com.sp.app.model.Member">
		INSERT INTO member_info (memberidx, name, phone, dob) 
		VALUES (seq_member.CURRVAL, #{name}, #{phone}, #{birth})
	</insert>

	<select id="loginMember" parameterType="String" resultType="com.sp.app.model.Member">
		SELECT MEMBERIDX, email, PASSWORD, NICKNAME, BLOCK, REG_DATE, LASTMODIFIED
		FROM member
		WHERE email = #{email} AND block = 0
	</select>

	<update id="updateLastLogin" parameterType="String">
		UPDATE member SET LASTLOGIN = SYSDATE, FAILCOUNT = 0
		WHERE email = #{email}
	</update>

	<select id="findByUserEmail" parameterType="String" resultType="com.sp.app.model.Member">
		select m.MEMBERIDX, EMAIL, PASSWORD, NICKNAME,
			   BLOCK, REG_DATE, m.LASTMODIFIED, LASTLOGIN, FAILCOUNT,
			   ma.ADDRNAME, ma.ADDRTITLE, ma.ADDRDETAIL, ma.FIRSTADDR,
			   mi.PHONE, TO_CHAR(mi.DOB, 'YYYY-MM-DD') AS birth,
			   r.authority
		from MEMBER m
				 LEFT JOIN MEMBER_ADDRESS ma
						   ON m.MEMBERIDX = ma.MEMBERIDX AND ma.FIRSTADDR = 1
				 LEFT JOIN MEMBER_INFO mi
						   ON m.MEMBERIDX = mi.MEMBERIDX
				 LEFT JOIN ROLES r
						   ON m.MEMBERIDX = r.MEMBERIDX
		where email = #{email} AND BLOCK = 0
	</select>

	<!-- 시퀀스값 가져오기 -->
	<select id="getMemberIdx" parameterType="String" resultType="Long">
		SELECT memberIdx
		FROM member
		WHERE email = #{email} AND BLOCK = 0
	</select>

	<select id="checkFailureCount" parameterType="String" resultType="int">
		SELECT FAILCOUNT
		FROM MEMBER
		WHERE EMAIL = #{email}
	</select>


	<!-- 패스워드 실패 횟수 증가-->
	<update id="updateFailureCount" parameterType="String">
		update MEMBER set FAILCOUNT = FAILCOUNT + 1
		where EMAIL = #{email}
	</update>

	<!-- 패스워드 실패 횟수 초기화 -->
	<update id="updateFailureCountReset" parameterType="String">
		UPDATE MEMBER SET FAILCOUNT = 0
		WHERE EMAIL = #{email}
	</update>

	<!-- 어쏘러티(권한) 테이블 -->
	<insert id="insertAuthority" parameterType="map">
		INSERT INTO ROLES(MEMBERIDX, authority)
		VALUES (SEQ_MEMBER.CURRVAL, #{autho})
	</insert>
	
	<insert id="inserAuthForSeller" parameterType="map" >
		INSERT INTO ROLES(MEMBERIDX, authority)
		VALUES (#{memberidx}, #{autho})
	</insert>
	
	<select id="getMemberidx" parameterType="String" resultType="Long">
		SELECT memberidx FROM member WHERE email = #{email}
	</select>

	<!--   <delete id="deleteAuthority" parameterType="map">-->
	<!--      DELETE FROM ROLES-->
	<!--      WHERE MEMBERIDX = (SEQ_MEMBER.nextval) AND authority = #{authority}-->
	<!--   </delete>-->

	<delete id="deleteAuthority" parameterType="map">
		DELETE FROM ROLES
		WHERE MEMBERIDX = (
			SELECT memberIdx FROM MEMBER WHERE email = #{email} AND BLOCK = 0
		) AND authority = #{authority}
	</delete>



	<select id="findByAuthority" parameterType="String" resultType="String">
		SELECT authority
		FROM ROLES
		WHERE MEMBERIDX = (
			SELECT memberIdx
			FROM member
			WHERE email = #{email}
		)
	</select>

	<!-- 이름, 배송지, 전화번호 -->
	<select id="getShippingInfo" parameterType="Long" resultType="com.sp.app.model.ShippingInfo">
		SELECT MEMBERIDX, NAME AS receiverName, PHONE, ADDRNAME AS addName, ADDRTITLE AS addTitle, ADDRDETAIL AS addDetail,
			   FIRSTADDR AS firstAdd
		FROM MEMBER_ADDRESS
		WHERE MEMBERIDX = #{memberIdX} AND FIRSTADDR = 1
	</select>

	<!--  작가 회원가입 이메일 검증  -->
	<select id="checkOfSeller" parameterType="String" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM seller_apply WHERE email = #{email} and agreed = 0
	</select>
	
	<!--  입점 신청 내역 가져오기  -->
	<select id="getHistory" parameterType="String" resultType="com.sp.app.model.Seller">
		SELECT seller_apply_num, name, email, phone, brandname, brandintro, intropeice, forextra
		FROM seller_apply 
		WHERE email = #{email} and agreed = 0
	</select>
	
	<insert id="sellerinfo" parameterType="com.sp.app.model.Seller">
		INSERT INTO seller_brand (brand_code, memberidx, phone, brandname, brandintro, enable) 
		VALUES (SEQ_SELLER_BRAND.NEXTVAL, seq_member.CURRVAL, #{phone}, #{brandName}, #{brandIntro}, 0)
	</insert>
	
	<insert id="sellerBankInfo" parameterType="com.sp.app.model.Seller">
		INSERT INTO seller_bankaccount (memberidx, bank, accnumber, accimage) 
		VALUES (seq_member.CURRVAL, #{bank}, #{accNumber}, #{accImage})
	</insert>
</mapper>