<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="com.sp.app.artist.mapper.ProductManageMapper">
	<!-- 일반 상품 목록 -->

	<select id="findByCategoryId" parameterType="int" resultType="com.sp.app.artist.model.ProductManage">
		SELECT categoryCode, name, parentCategoryCode
		FROM productCategory
		WHERE categoryCode = #{categoryCode}
	</select>
	
	<!-- 상품 상위 카테고리 목록 -->
	<select id="listMainCategory"  resultType="com.sp.app.artist.model.ProductManage">
	    SELECT categoryCode, name, parentCategoryCode
		FROM productCategory
		WHERE parentCategoryCode is null
	</select>
	
	<!-- 상품 하위 카테고리 목록 -->
	<select id="listSubCategory" parameterType="Long" resultType="com.sp.app.artist.model.ProductManage">
		SELECT categoryCode, name, parentCategoryCode
		FROM productCategory
		WHERE parentCategoryCode = #{parentCategoryCode}
	</select>

	<!-- 작품 등록 -->
	<select id="seq_product" resultType="Long">
		SELECT SEQ_PRODUCT.NEXTVAL FROM dual
	</select>
	
	
	<insert id="insertProduct" parameterType="com.sp.app.artist.model.ProductManage">
		INSERT INTO product (
		    productcode,     
		    brand_code,      
		    item,            
		    price,           
		    discount,        
		    addoptions,      
		    describe,        
		    upload,          
		    modified,        
		    categorycode,    
		    thumbnail,       
		    blind    
		    )
		VALUES (
		    #{productCode},
		    (SELECT S.BRAND_CODE FROM SELLER_BRAND S WHERE S.MEMBERIDX = #{memberIdx}),
		    #{item},       
		    #{price},      
		    #{discount},   
		    0,             
		    #{describe},   
		    SYSDATE,       
		    SYSDATE,       
		    #{categoryCode},
		    #{thumbnail},  
		    0
		)
	</insert>
	
		<!-- 추가 이미지 등록 -->
	<insert id="insertProductImage" parameterType="com.sp.app.artist.model.ProductManage">
		INSERT INTO PRODUCTIMAGE(IMAGE_CODE, PRODUCTCODE, IMAGEFILENAME)
		VALUES(SEQ_PRODUCTIMAGE.NEXTVAL, #{productCode}, #{imageFileName})
	</insert>
	
	  	<!-- 옵션1, 옵션2 리스트-->
	<select id="listProductOption" parameterType="Long" resultType="com.sp.app.artist.model.ProductManage">
		SELECT option_code, productCode, option_name, option_price, parent_option, soldout
		FROM productOption
		WHERE productCode = #{productCode}
		ORDER BY parent_option NULLS FIRST, parent_option
	</select>

	<!-- 옵션 상세 정보 리스트-->	
	<select id="listOptionDetail" parameterType="Long" resultType="com.sp.app.artist.model.ProductManage">
		SELECT optionDetail_code, option_code, option_value
		FROM productOptionDetail
		WHERE option_code = #{option_code}
		ORDER BY optionDetail_code
	</select>

	
	<!-- 옵션1, 옵션2 등록 -->
	<select id="seq_productOption" resultType="Long">
		SELECT seq_productoption.NEXTVAL FROM dual
	</select>
	
	<insert id="insertProductOption" parameterType="com.sp.app.artist.model.ProductManage">
		INSERT INTO productOption(option_code, productCode, option_name, option_price, parent_option, soldout)
		    VALUES(
		        #{option_code},
		        #{productCode},
		        #{option_name},
		        #{option_price},
		        <choose>
		            <when test="parent_option == 0">
		                null
		            </when>
		            <otherwise>
		                #{parent_option}
		            </otherwise>
		        </choose>,
		        0
        )
	</insert>


	<insert id="insertProductOptionDetail" parameterType="com.sp.app.artist.model.ProductManage">
		INSERT INTO productOptionDetail(optionDetail_code, option_code, option_value)
		VALUES  (seq_productOptionDetail.NEXTVAL, #{option_code}, #{option_value})
	</insert>
	
	<select id="listProduct" parameterType="map" resultType="com.sp.app.artist.model.ProductManage">
		SELECT p.productCode, c.parentCategoryCode, c.categoryCode, item, Price, discount, addoptions, modified, thumbnail, blind, b.brand_code, b.brandName, m.memberIdx
		FROM product p 
		JOIN productCategory c 
	    ON p.categoryCode = c.categoryCode
        JOIN seller_brand b 
        ON b.brand_code = p.brand_code
        JOIN member m
        on m.memberIdx = b.memberIdx
        where m.memberIdx = #{memberIdx}
	    ORDER BY upload DESC
	</select>
	
	<delete id="deleteProduct" parameterType="Long" >
		delete product where productCode = #{productCode}
	</delete>
	<delete id="deleteOrderitem" parameterType="Long" >
		delete ORDER_ITEM where productCode = #{productCode}
	</delete>
	<delete id="deletePackage" parameterType="Long" >
		delete PACKAGE where productCode = #{productCode}
	</delete>
	<delete id="deleteProductimage" parameterType="Long" >
		delete PRODUCTIMAGE where productCode = #{productCode}
	</delete>
	<delete id="deleteCartitem" parameterType="Long" >
		delete CART_ITEM where productCode = #{productCode}
	</delete>
	<delete id="deleteProductoption" parameterType="Long" >
		delete PRODUCTOPTION where productCode = #{productCode}
	</delete>
	
	<!-- 작품 수정시 작품 조회 -->
	<select id="findById" parameterType="Long" resultType="com.sp.app.artist.model.ProductManage">
		SELECT p.productCode, c.parentCategoryCode, c.categoryCode, brand_code, item, Price, discount, addOptions, describe, upload, modified, thumbnail, blind, m.memberIdx
		FROM product p 
		JOIN productCategory c 
	    ON p.categoryCode = c.categoryCode
        WHERE productCode = ${productCode} 	
	</select>
	
	<!-- 작품 수정시 추가 이미지 조회 -->
	<select id="listAddFiles" parameterType="Long" resultType="com.sp.app.artist.model.ProductManage">
		SELECT image_code, productCode, imageFileName
		FROM productImage
		WHERE productCode = ${productCode}	
	</select>	
	
	<!-- 작품 수정 -->
	<update id="updateProduct" parameterType="com.sp.app.artist.model.ProductManage">
		UPDATE product 
		SET categoryCode = #{categoryCode}, item =#{item}, price = #{price}
		discount = #{discount}, describe = #{describe}, thumbnail = #{thumbnail}, 
		update_date = SYSDATE
		WHERE productCode = #{productCode}
	</update>
	


</mapper>
	