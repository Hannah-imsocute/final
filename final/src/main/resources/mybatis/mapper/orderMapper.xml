<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.OrderMapper">

    <!-- 최근 마지막 주문번호 가지고오기 -->
    <select id="getLatestOrderCode" resultType="String">
        select ORDER_CODE
        from PRODUCT_ORDER
        order by ORDER_DATE desc
        FETCH FIRST 1 ROWS ONLY
    </select>


    <!-- 주문 번호 등록 -->
    <insert id="insertOrder" parameterType="com.sp.app.model.Order">
        INSERT INTO PRODUCT_ORDER
        (order_code, memberidx, order_date, total_price, coupon_code, couponvalue, spentpoint, netpay)
        VALUES
            (#{orderCode}, #{memberIdx}, SYSDATE,  #{totalPrice}, #{couponCode, jdbcType=VARCHAR}, #{couponValue}, #{spentPoint}, #{netPay})
    </insert>


    <!-- 결제 내역 등록 -->
    <!-- COMFIRMCODE -> 승인번호 -->
    <insert id="insertPayment" parameterType="com.sp.app.model.Payment">
        insert into PAYBYMETHOD (ORDER_CODE, MEMBERIDX, BYMETHOD, CONFIRMCODE, PROVIDER, CONFIRM_DATE, CARDNUMBER)
        values (#{orderCode}, #{memberIdx}, #{byMethod}, #{confirmCode}, #{provider}, TO_DATE(#{confirmDate}, 'YYYY-MM-DD HH24:MI:SS'), #{cardNumber, jdbcType=NUMERIC} )
    </insert>

<!--   &lt;!&ndash;  주문 상세 정보 등록  &ndash;&gt;-->
<!--    <insert id="insertOrderDetail" parameterType="com.sp.app.model.Order">-->
<!--        insert into ORDER_ITEM(ITEM_CODE, ORDER_CODE, PRODUCTCODE, OPTIONS, PRICEFOREACH, QUANTITY, PRICE, SHIPPING, ORDER_STATE)-->
<!--        values (SEQ_ORDER_ITEM.nextval, #{orderCode}, #{productCode}, #{options, jdbcType = VARCHAR}, #{priceForeach}, #{quantity}, #{price}, #{shipping}, 0)-->
<!--    </insert>-->
<!--    -->

    <insert id="insertOrderDetail" parameterType="com.sp.app.model.OrderItem">
        <selectKey keyProperty="itemCode" resultType="long" order="BEFORE">
            SELECT SEQ_ORDER_ITEM.nextval FROM dual
        </selectKey>
        insert into ORDER_ITEM(ITEM_CODE, ORDER_CODE, PRODUCTCODE, OPTIONS, PRICEFOREACH, QUANTITY, PRICE, SHIPPING, ORDER_STATE)
        VALUES (#{itemCode}, #{orderCode}, #{productCode}, #{options, jdbcType=VARCHAR}, #{priceForeach}, #{quantity}, #{price}, #{shipping}, 0)
    </insert>


    <!--     0: 주문접수, 1: 결제완료, 2: 배송준비중 -->

    <!--  배송지 등록 -->
    <insert id="insertShippingAddress" parameterType="com.sp.app.model.ShippingInfo">
        insert into MEMBER_ADDRESS (addr_num, memberidx, name, phone, addrname, ADDRTITLE, ADDRDETAIL, FIRSTADDR, POSTCODE)
        values (SEQ_MEMBER_ADDRESS.nextval, #{memberIdx}, #{receiverName}, #{phone}, #{addName}, #{addTitle}, #{addDetail}, #{firstAdd}, #{postCode})
    </insert>

    <!-- 포인트 등록 -->
  <!--
   <insert id="insertUserPoint" parameterType="com.sp.app.model.MemberPoint">
        insert into POINT_SAVE (POINT_SAVE_NUM, MEMBERIDX, SAVEAMOUNT, SAVEDATE, EXPIREDATE, REASON, ENABLE, BALANCE)
        VALUES (SEQ_POINT_SAVE.nextval, #{memberIdx}, #{saveAmount}, TO_DATE(#{SAVEDATE},'YYYY-MM-DD HH24:MI:SS'),
                #{expireDate}, #{reason}, #{enable}, #{balance})
    </insert>
    -->

    <!--포인트 등록 -->
    <insert id="insertUserPoint" parameterType="com.sp.app.model.MemberPoint">
        insert into POINT_EXPIRED (EXPIERD_NUM, MEMBERIDX, ORDER_CODE, POINT_SAVE_NUM, USEDAMOUNT, USEDATE)
        VALUES (SEQ_POINT_SAVE.nextval, #{memberIdx}, #{orderCode}, #{usedAmount}, #{pointSaveNum},
                TO_DATE(#{usedDate},'YYYY-MM-DD HH24:MI:SS'))
    </insert>
    <!-- 주문 상세 정보 가져오기 -->
    <select id="getOrderDetailList" parameterType="String" resultType="com.sp.app.model.Order">
        select
            o.ORDER_CODE as orderCode, OPTIONS as options,
            PRICEFOREACH as priceForeach, quantity as quantity, PRICE as totalPrice,
            SHIPPING as shippqing, ORDER_STATE as orderState,  BYMETHOD   as payment,
            CONFIRMCODE  as couponCode,
            TO_CHAR(CONFIRM_DATE, 'YYYY-MM-DD HH24:MI:SS') as confirmDate
        from ORDER_ITEM o
                 join PAYBYMETHOD p on p.ORDER_CODE = o.ORDER_CODE
        where o.ORDER_CODE = #{orderCode}
    </select>

    <!-- 여러 개의 (orderCode, productCode) 쌍을 파라미터로 받아
       해당 주문 상세 내역(주문+주문상품+배송+결제)을 한번에 조회하는 예시 -->
    <select id="listOrderProduct" parameterType="java.util.List"
            resultType="com.sp.app.model.Order">
        SELECT p.order_code           AS 주문번호,
               i.order_state          AS 배송상태,
               pk.STATE               AS 배송상태1,
               pr.ITEM       AS 상품명,
               p.order_date          AS 주문일자,
               i.quantity            AS 수량,
               i.price               AS 상품금액
        FROM   product_order p
                   JOIN order_item i
                        ON p.order_code = i.order_code
                   JOIN product pr
                        ON i.productcode = pr.productcode
                   JOIN SELLER_BRAND s
                        ON pr.BRAND_CODE = s.BRAND_CODE
                   JOIN PACKAGE pk
                        ON pk.ITEM_CODE = i.ITEM_CODE
        WHERE  p.memberidx = #{memberIdx}
        ORDER  BY p.order_date DESC
    </select>

    <!-- 주문에 포함된 상품 정보를 조회할 경우 -->
    <!-- 상품 정보 -->
    <select id="getProduct" parameterType="Long" resultType="com.sp.app.model.OrderItem">
        select PRODUCTCODE as productCode, OPTIONS, PRICEFOREACH as priceForeach, QUANTITY, PRICE, SHIPPING
        from ORDER_ITEM
        where PRODUCTCODE = #{productCode} AND ROWNUM = 1
    </select>

    <!--유저의 가장 최근 포인트 조회-->
    <select id="getLatestUserPoint" parameterType="Long" resultType="com.sp.app.model.MemberPoint">
        select point_save_num as pointSaveNum, memberidx, saveamount as saveAmount, savedate as saveDate, expiredate as expireDate,
               reason, enable, balance
        from POINT_SAVE
        where MEMBERIDX = #{memberIdx}
        order by EXPIREDATE desc
            fetch first 1 rows only
    </select>


    <!--유저 쿠폰 조회-->
    <select id="getCouponList" parameterType="Long" resultType="com.sp.app.model.Coupon">
        select COUPONCODE, c.VALID as couponValid, c.RATE as couponRate,
               c.EXPIREDATE as expireDate
        from USER_HAVE_COUPON uc
        left join COUPON c on c.COUPON_CODE = uc.COUPONCODE
        where memberIdx = #{memberIdx}
    </select>




</mapper>