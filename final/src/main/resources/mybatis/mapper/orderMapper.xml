<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.OrderMapper">

    <!-- 최근 마지막 주문번호 가지고오기 -->
    <select id="getLatestOrderCode" resultType="String">
        select ORDER_CODE
        from PRODUCT_ORDER
        order by ORDER_DATE desc
        FETCH FIRST 1 ROWS ONLY
    </select>


    <!-- 주문 번호 등록 -->
    <insert id="insertOrder" parameterType="com.sp.app.model.Order">
        INSERT INTO PRODUCT_ORDER
        (order_code, memberidx, order_date, total_price, coupon_code, couponvalue, spentpoint, netpay)
        VALUES
            (#{orderCode}, #{memberIdx}, SYSDATE,  #{totalPrice}, #{couponCode, jdbcType=VARCHAR}, #{couponValue}, #{spentPoint}, #{netPay})
    </insert>


    <!-- 결제 내역 등록 -->
    <!-- COMFIRMCODE -> 승인번호 -->
    <insert id="insertPayment" parameterType="com.sp.app.model.Payment">
        insert into PAYBYMETHOD (ORDER_CODE, MEMBERIDX, BYMETHOD, COMFIRMCODE, PROVIDER, confirm_date, card)
        values (#{orderCode}, #{memberIdx}, #{byMethod}, #{confirmCode}, #{provider}, TO_CHAR(#{confirmDate}, 'YYYY-MM-DD HH24:MI:SS'), #{card} )
    </insert>

    <!--  주문 상세 정보 등록  -->
    <insert id="insertOrderDetail" parameterType="com.sp.app.model.Order">
        insert into ORDER_ITEM(ITEM_CODE, ORDER_CODE, PRODUCTCODE, OPTIONS, PRICEFOREACH, QUANTITY, PRICE, SHIPPING, ORDER_STATE)
        values (SEQ_ORDER_ITEM.nextval, #{orderCode}, #{productCode}, #{options, jdbcType = VARCHAR}, #{priceForeach}, #{quantity}, #{price}, #{shipping}, 0)
    </insert>

    <!--     0: 주문접수, 1: 결제완료, 2: 배송준비중 -->

    <!--  배송지 등록 -->
    <insert id="insertShippingAddress" parameterType="com.sp.app.model.ShippingInfo">
        insert into MEMBER_ADDRESS (addr_num, memberidx, name, phone, addrname, ADDRTITLE, ADDRDETAIL, FIRSTADDR, POSTCODE)
        values (SEQ_MEMBER_ADDRESS.nextval, #{memberIdx}, #{receiverName}, #{phone}, #{addName}, #{addTitle}, #{addDetail}, #{firstAdd}, #{postCode})
    </insert>

    <!-- 포인트 등록 -->
  <!--
   <insert id="insertUserPoint" parameterType="com.sp.app.model.MemberPoint">
        insert into POINT_SAVE (POINT_SAVE_NUM, MEMBERIDX, SAVEAMOUNT, SAVEDATE, EXPIREDATE, REASON, ENABLE, BALANCE)
        VALUES (SEQ_POINT_SAVE.nextval, #{memberIdx}, #{saveAmount}, TO_DATE(#{SAVEDATE},'YYYY-MM-DD HH24:MI:SS'),
                #{expireDate}, #{reason}, #{enable}, #{balance})
    </insert>
    -->

    <!--포인트 등록 -->
    <insert id="insertUserPoint" parameterType="com.sp.app.model.MemberPoint">
        insert into POINT_EXPIRED (EXPIERD_NUM, MEMBERIDX, ORDER_CODE, POINT_SAVE_NUM, USEDAMOUNT, USEDATE)
        VALUES (SEQ_POINT_SAVE.nextval, #{memberIdx}, #{orderCode}, #{usedAmount}, #{pointSaveNum},
                TO_DATE(#{usedDate},'YYYY-MM-DD HH24:MI:SS'))
    </insert>
    <!-- 주문 상세 정보 가져오기 -->
    <select id="getOrderDetailList" parameterType="String" resultType="com.sp.app.model.Order">
        select
            o.ORDER_CODE as orderCode, OPTIONS as options,
            PRICEFOREACH as priceForeach, quantity as quantity, PRICE as totalPrice,
            SHIPPING as shippqing, ORDER_STATE as orderState,  BYMETHOD   as payment,
            CONFIRMCODE  as couponCode,
            TO_CHAR(CONFIRM_DATE, 'YYYY-MM-DD HH24:MI:SS') as confirmDate
        from ORDER_ITEM o
                 join PAYBYMETHOD p on p.ORDER_CODE = o.ORDER_CODE
        where o.ORDER_CODE = #{orderCode} AND
    </select>

    <!-- 여러 개의 (orderCode, productCode) 쌍을 파라미터로 받아
       해당 주문 상세 내역(주문+주문상품+배송+결제)을 한번에 조회하는 예시 -->
    <select id="listOrderProduct" parameterType="java.util.List"
            resultType="com.sp.app.model.Order">
        SELECT o.order_code         AS orderCode
        , o.order_date         AS orderDate
        , o.total_price        AS totalPrice
        , o.coupon_code        AS couponCode
        , o.coupon_value       AS couponValue
        , o.spent_point        AS spentPoint
        , o.net_pay            AS netPay
        , o.confirm_date       AS confirmDate
        , o.payment            AS payment

        , i.product_code       AS productCode
        , i.price              AS price
--         , i.options1           AS options1
        , i.options            AS options
--         , i.options2           AS options2
        , i.price_foreach      AS priceForeach
        , i.quantity           AS quantity
        , i.shipping           AS shipping
        , i.order_state        AS orderState
        , i.discount           AS discount

        , s.receiver_name      AS receiverName
        , s.post_code          AS postCode
        , s.add_name           AS addName
        , s.add_title          AS addTitle
        , s.add_detail         AS addDetail
        , s.phone              AS phone
        , s.first_add          AS firstAdd

        , p.confirm_code       AS confirmCode
        , p.provider           AS provider
        , p.by_method          AS byMethod
        , p.card_number        AS cardNumber

        FROM (
        <!-- 먼저 필요한 (orderCode, productCode) 쌍에 해당하는
             주문 항목만 가져오기 위한 서브쿼리 예시 -->
        SELECT order_code, product_code
        FROM order_item
        WHERE (order_code, product_code) IN
        <foreach collection="list" item="item" index="index"
                 open="(" separator="," close=")">
            (#{item.orderCode}, #{item.productCode})
        </foreach>
        ) sub
        /* 실제 order_item 레코드와 조인 */
        JOIN order_item i
        ON sub.order_code   = i.order_code
        AND sub.product_code = i.product_code

        /* 주문 테이블과 조인 */
        JOIN orders o
        ON i.order_code = o.order_code

        /* 배송 정보 테이블 (예: shipping_info)와 조인 */
        LEFT OUTER JOIN shipping_info s
        ON o.order_code = s.order_code

        /* 결제 정보 테이블 (예: payment)와 조인 */
        LEFT OUTER JOIN payment p
        ON o.order_code = p.order_code

        <!-- 필요하다면 추가로 product, productStock, productOption 등도 조인 가능 -->
        <!--
            LEFT OUTER JOIN product pr
              ON i.product_code = pr.product_code
            LEFT OUTER JOIN product_stock ps
              ON i.product_code = ps.product_num
            ...
        -->
    </select>

    <!-- 주문에 포함된 상품 정보를 조회할 경우 -->
    <!-- 상품 정보 -->
    <select id="getProduct" parameterType="Long" resultType="com.sp.app.model.OrderItem">
        select PRODUCTCODE as productCode, OPTIONS, PRICEFOREACH as priceForeach, QUANTITY, PRICE, SHIPPING
        from ORDER_ITEM
        where PRODUCTCODE = #{productCode} AND ROWNUM = 1
    </select>

    <!--유저의 가장 최근 포인트 조회-->
    <select id="getLatestUserPoint" parameterType="Long" resultType="com.sp.app.model.MemberPoint">
        select point_save_num as pointSaveNum, memberidx, saveamount as saveAmount, savedate as saveDate, expiredate as expireDate,
               reason, enable, balance
        from POINT_SAVE
        where MEMBERIDX = #{memberIdx}
        order by EXPIREDATE desc
            fetch first 1 rows only
    </select>


    <!--유저 쿠폰 조회-->
    <select id="getCouponList" parameterType="Long" resultType="com.sp.app.model.Coupon">
        select COUPONCODE, c.VALID as couponValid, c.RATE as couponRate,
               c.EXPIREDATE as expireDate
        from USER_HAVE_COUPON uc
        left join COUPON c on c.COUPON_CODE = uc.COUPONCODE
        where memberIdx = #{memberIdx}
    </select>




</mapper>